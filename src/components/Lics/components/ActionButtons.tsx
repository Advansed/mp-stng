// src/components/Lics/components/ActionButtons.tsx

import React from 'react';
import { IonButton, IonIcon, IonText } from '@ionic/react';
import { 
  arrowBackOutline, 
  refreshOutline, 
  checkmarkOutline,
  hourglassOutline
} from 'ionicons/icons';
import { ActionButtonsProps, AddLicMode } from './types';

export function ActionButtons({ 
  mode,
  canSubmit,
  loading,
  onSubmit,
  onBack,
  onReset
}: ActionButtonsProps): JSX.Element {

  return (
    <div className="action-buttons">
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex gap-1 ml-1 mr-1 mb-1">
        
        {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
        <IonButton
          fill="outline"
          color="medium"
          onClick={onBack}
          disabled={loading}
          className="flex-1"
        >
          <IonIcon icon={arrowBackOutline} slot="start" />
          –ù–∞–∑–∞–¥
        </IonButton>

        {/* –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å" */}
        <IonButton
          fill="clear"
          color="medium"
          onClick={onReset}
          disabled={loading}
          className="flex-shrink-0"
        >
          <IonIcon icon={refreshOutline} slot="icon-only" />
        </IonButton>

        {/* –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å" */}
        <IonButton
          fill="solid"
          color="primary"
          onClick={onSubmit}
          disabled={!canSubmit || loading}
          className="flex-1"
        >
          {loading ? (
            <>
              <IonIcon icon={hourglassOutline} slot="start" />
              –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
            </>
          ) : (
            <>
              <IonIcon icon={checkmarkOutline} slot="start" />
              –î–æ–±–∞–≤–∏—Ç—å
            </>
          )}
        </IonButton>
      </div>

      {/* –°—Ç–∞—Ç—É—Å —Ñ–æ—Ä–º—ã */}
      <div className="ml-1 mr-1 mb-05">
        {loading ? (
          <p className="text-center fs-07 color-primary">
            ‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...
          </p>
        ) : !canSubmit ? (
          <p className="text-center fs-07 color-medium">
            üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
          </p>
        ) : (
          <p className="text-center fs-07 color-success">
            ‚úÖ –§–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
          </p>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ development) */}
      {process.env.NODE_ENV === 'development' && (
        <div className="ml-1 mr-1 mb-05">
          <p className="text-center fs-06 color-light">
            Debug: Mode={mode}, CanSubmit={canSubmit.toString()}, Loading={loading.toString()}
          </p>
        </div>
      )}
    </div>
  );
}

// ========================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´
// ========================

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
export function FormProgress({ 
  mode, 
  completedSteps, 
  totalSteps 
}: { 
  mode: AddLicMode; 
  completedSteps: number; 
  totalSteps: number; 
}): JSX.Element {
  const progress = (completedSteps / totalSteps) * 100;
  
  return (
    <div className="form-progress ml-1 mr-1 mb-1">
      <div className="flex justify-between items-center mb-05">
        <span className="fs-07 color-medium">
          –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        </span>
        <span className="fs-07 color-medium">
          {completedSteps}/{totalSteps}
        </span>
      </div>
      <div className="progress-bar">
        <div 
          className="progress-bar-fill" 
          style={{ width: `${progress}%` }}
        ></div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–≥–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
export function FormSteps({ 
  mode, 
  currentStep 
}: { 
  mode: AddLicMode; 
  currentStep: number; 
}): JSX.Element {
  const getSteps = () => {
    switch (mode) {
      case AddLicMode.BY_CODE:
        return [
          '–ù–æ–º–µ—Ä –õ–°',
          '–§–ò–û',
          '–ì–æ—Ç–æ–≤–æ'
        ];
      case AddLicMode.BY_ADDRESS:
        return [
          '–£–ª—É—Å',
          '–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç',
          '–£–ª–∏—Ü–∞',
          '–î–æ–º',
          '–ù–æ–º–µ—Ä –õ–° –∏ –§–ò–û',
          '–ì–æ—Ç–æ–≤–æ'
        ];
      default:
        return [];
    }
  };

  const steps = getSteps();

  return (
    <div className="form-steps ml-1 mr-1 mb-1">
      <div className="flex justify-between">
        {steps.map((step, index) => (
          <div 
            key={index}
            className={`form-step ${index <= currentStep ? 'completed' : 'pending'}`}
          >
            <div className="form-step-number">
              {index <= currentStep ? (
                <IonIcon icon={checkmarkOutline} />
              ) : (
                index + 1
              )}
            </div>
            <div className="form-step-label fs-07">
              {step}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
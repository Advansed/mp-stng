// src/components/Lics/components/useAddLics.ts

/* ===============================================================================
 * –ü–õ–ê–ù –ü–ï–†–ï–î–ï–õ–ö–ò AddLics.tsx –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É
 * ===============================================================================
 * 
 * ‚úÖ –í–´–ü–û–õ–ù–ï–ù–û:
 * - –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (Ulus, AddLicByAddressData, AddLicsState)
 * - –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω—ã API –º–µ—Ç–æ–¥—ã (loadUluses, selectUlus, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
 * 
 * üîÑ –í –ü–†–û–¶–ï–°–°–ï:
 * - –®–∞–≥ 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–µ –∏–∑ AddLic2)
 * - –®–∞–≥ 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ AddAccount
 * 
 * ‚è≥ –ü–õ–ê–ù–ò–†–£–ï–¢–°–Ø:
 * - –®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 * - –®–∞–≥ 6: –û—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * 
 * ===============================================================================
 */

import { useState, useCallback } from 'react';
import { Store, getData, getLics, getProfile } from '../../Store';
import { 
  AddLicMode, 
  AddLicsState, 
  AddLicByCodeData, 
  AddLicByAddressData,
  Ulus,           // üÜï
  Settlement,
  Street,
  House,
  UseAddLicsReturn,
  ApiResponse,
  AddAccountParams,
  StoreState
} from './types';
import { 
  ADD_LICS_CONSTANTS, 
  ADD_LICS_API_ENDPOINTS,
  DEBUG_PREFIXES 
} from './constants';

export const useAddLics = (): UseAddLicsReturn => {
  // ========================
  // –û–°–ù–û–í–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï - –û–ë–ù–û–í–õ–ï–ù–ù–û–ï
  // ========================
  
  const [state, setState] = useState<AddLicsState>({
    mode: ADD_LICS_CONSTANTS.DEFAULT_MODE,
    loading: false,
    message: '',
    codeData: { ...ADD_LICS_CONSTANTS.INITIAL_CODE_DATA },
    addressData: { ...ADD_LICS_CONSTANTS.INITIAL_ADDRESS_DATA },
    
    // üÜï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–ª—É—Å–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    uluses: [],
    selectedUlus: undefined,
    settlements: [],
    selectedSettlement: undefined,
    selectedStreet: undefined,
    selectedHouse: undefined,
  });

  // ========================
  // –£–¢–ò–õ–ò–¢–´
  // ========================

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const updateState = useCallback((updates: Partial<AddLicsState>) => {
    setState(prev => ({ ...prev, ...updates }));
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ Store
  const getToken = useCallback((): string => {
    try {
      const storeState = Store.getState() as StoreState;
      return storeState.login.token;
    } catch (error) {
      console.error(`${DEBUG_PREFIXES.ADD_LICS} Error getting token:`, error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }, []);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const log = useCallback((message: string, data?: any) => {
    console.log(`${DEBUG_PREFIXES.ADD_LICS} ${message}`, data || '');
  }, []);

  // ========================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê–ú–ò
  // ========================

  const setMode = useCallback((mode: AddLicMode) => {
    log(`Setting mode: ${mode}`);
    updateState({ 
      mode, 
      message: '' // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    });
  }, [updateState, log]);

  const resetToSelection = useCallback(() => {
    log('Resetting to selection mode');
    updateState({
      mode: AddLicMode.SELECTION,
      message: ''
    });
  }, [updateState, log]);

  // ========================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò –§–û–†–ú
  // ========================

  const updateCodeData = useCallback((field: keyof AddLicByCodeData, value: string) => {
    log(`Updating code form field: ${field} = ${value}`);
    setState(prev => ({
      ...prev,
      codeData: {
        ...prev.codeData,
        [field]: value
      }
    }));
  }, [log]);

  const updateAddressData = useCallback((field: keyof AddLicByAddressData, value: string) => {
    log(`Updating address form field: ${field} = ${value}`);
    setState(prev => ({
      ...prev,
      addressData: {
        ...prev.addressData,
        [field]: value
      }
    }));
  }, [log]);

  // ========================
  // –†–ê–ë–û–¢–ê –°–û –°–ü–†–ê–í–û–ß–ù–ò–ö–ê–ú–ò - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø
  // ========================
  
  // üÜï –®–∞–≥ 2.1: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ loadUluses –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É–ª—É—Å–æ–≤
  const loadUluses = useCallback(async (): Promise<void> => {
    try {
      log('Loading uluses...');
      updateState({ 
        loading: true, 
        message: ADD_LICS_CONSTANTS.MESSAGES.LOADING_ULUSES 
      });

      // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ª—É—Å—ã —á–µ—Ä–µ–∑ API
      // –ï—Å–ª–∏ API –¥–ª—è —É–ª—É—Å–æ–≤ –Ω–µ—Ç, –±—É–¥–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
      try {
        const response: ApiResponse = await getData(ADD_LICS_API_ENDPOINTS.GET_ULUSES, {
          token: getToken()
        });

        if (!response.error && response.data) {
          const uluses: Ulus[] = response.data || [];
          log(`Loaded ${uluses.length} uluses`);

          updateState({
            uluses,
            loading: false,
            message: ''
          });
          return;
        }
      } catch (error) {
        log('No dedicated uluses API, will extract from settlements');
      }

      // –ï—Å–ª–∏ API –¥–ª—è —É–ª—É—Å–æ–≤ –Ω–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º —É–ª—É—Å—ã –∏–∑ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
      const settlementsResponse: ApiResponse = await getData(ADD_LICS_API_ENDPOINTS.GET_SETTLEMENTS, {
        token: getToken()
      });

      if (settlementsResponse.error) {
        throw new Error(settlementsResponse.message || ADD_LICS_CONSTANTS.MESSAGES.ULUSES_LOAD_ERROR);
      }

      const settlements: Settlement[] = settlementsResponse.data || [];
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–ª—É—Å—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
      const ulusesMap = new Map<string, Ulus>();
      settlements.forEach(settlement => {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É–ª—É—Å —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        const parts = settlement.name.split(' ');
        if (parts.length > 1) {
          const ulusName = parts[0] + ' ' + (parts[1] || ''); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–ª–æ–≤–∞ –∫–∞–∫ —É–ª—É—Å
          const ulusId = `ulus_${ulusName.toLowerCase().replace(/\s+/g, '_')}`;
          
          if (!ulusesMap.has(ulusId)) {
            ulusesMap.set(ulusId, {
              ulus_id: ulusId,
              name: ulusName,
              settlements: []
            });
          }
          
          ulusesMap.get(ulusId)!.settlements!.push(settlement);
        }
      });

      const uluses = Array.from(ulusesMap.values());
      log(`Extracted ${uluses.length} uluses from settlements`);

      updateState({
        uluses,
        settlements,
        loading: false,
        message: ''
      });

    } catch (error) {
      console.error(`${DEBUG_PREFIXES.ADD_LICS} Error loading uluses:`, error);
      updateState({
        loading: false,
        message: error instanceof Error ? error.message : ADD_LICS_CONSTANTS.MESSAGES.ULUSES_LOAD_ERROR
      });
    }
  }, [getToken, updateState, log]);

  // üÜï –®–∞–≥ 2.1: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ selectUlus –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ª—É—Å–∞
  const selectUlus = useCallback(async (ulus: Ulus): Promise<void> => {
    try {
      log(`Selecting ulus: ${ulus.name} (${ulus.ulus_id})`);
      
      updateState({ 
        selectedUlus: ulus,
        selectedSettlement: undefined,
        selectedStreet: undefined,
        selectedHouse: undefined,
        settlements: ulus.settlements || []
      });

      updateAddressData('ulusId', ulus.ulus_id);
      updateAddressData('ulusName', ulus.name);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–±–æ—Ä—ã
      updateAddressData('settlementId', '');
      updateAddressData('streetId', '');
      updateAddressData('houseId', '');

    } catch (error) {
      console.error(`${DEBUG_PREFIXES.ADD_LICS} Error selecting ulus:`, error);
      updateState({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–ª—É—Å–∞'
      });
    }
  }, [updateState, updateAddressData, log]);

  // ‚úÖ –®–∞–≥ 2.2: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º loadSettlements - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ulusId
  const loadSettlements = useCallback(async (ulusId?: string): Promise<void> => {
    try {
      log('Loading settlements...', { ulusId });
      updateState({ 
        loading: true, 
        message: ADD_LICS_CONSTANTS.MESSAGES.LOADING_SETTLEMENTS 
      });

      // ‚úÖ –®–∞–≥ 3.1: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π API –≤—ã–∑–æ–≤ –∫–∞–∫ –≤ AddLic2
      const response: ApiResponse = await getData(ADD_LICS_API_ENDPOINTS.GET_SETTLEMENTS, {
        token: getToken()
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ AddLic2 —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –∏–¥–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      });

      if (response.error) {
        throw new Error(response.message || ADD_LICS_CONSTANTS.MESSAGES.SETTLEMENTS_LOAD_ERROR);
      }

      let settlements: Settlement[] = response.data || [];
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ulusId, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
      if (ulusId && state.uluses.length > 0) {
        const selectedUlus = state.uluses.find(u => u.ulus_id === ulusId);
        if (selectedUlus && selectedUlus.settlements) {
          settlements = selectedUlus.settlements;
        }
      }
      
      log(`Loaded ${settlements.length} settlements`);

      updateState({
        settlements,
        loading: false,
        message: ''
      });

    } catch (error) {
      console.error(`${DEBUG_PREFIXES.ADD_LICS} Error loading settlements:`, error);
      updateState({
        loading: false,
        message: error instanceof Error ? error.message : ADD_LICS_CONSTANTS.MESSAGES.SETTLEMENTS_LOAD_ERROR
      });
    }
  }, [getToken, updateState, log, state.uluses]);

  // ‚úÖ –®–∞–≥ 2.2: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º selectSettlement - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const selectSettlement = useCallback(async (settlement: Settlement): Promise<void> => {
    try {
      log(`Selecting settlement: ${settlement.name} (${settlement.s_id})`);
      updateState({ 
        loading: true,
        message: ADD_LICS_CONSTANTS.MESSAGES.LOADING_STREETS,
        selectedSettlement: settlement,
        selectedStreet: undefined,
        selectedHouse: undefined
      });

      updateAddressData('settlementId', settlement.s_id);
      updateAddressData('settlementName', settlement.name);

      // ‚úÖ –®–∞–≥ 3.1: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π API –≤—ã–∑–æ–≤ –∫–∞–∫ –≤ AddLic2
      const response: ApiResponse = await getData(ADD_LICS_API_ENDPOINTS.GET_STREETS, {
        token: getToken(),
        s_id: settlement.s_id  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–∞–∫ –≤ AddLic2
      });

      if (response.error) {
        throw new Error(response.message || ADD_LICS_CONSTANTS.MESSAGES.STREETS_LOAD_ERROR);
      }

      const streets: Street[] = response.data || [];
      log(`Loaded ${streets.length} streets for settlement ${settlement.name}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º settlement —Å —É–ª–∏—Ü–∞–º–∏
      const updatedSettlement = { ...settlement, streets };

      updateState({
        selectedSettlement: updatedSettlement,
        loading: false,
        message: ''
      });

    } catch (error) {
      console.error(`${DEBUG_PREFIXES.ADD_LICS} Error loading streets:`, error);
      updateState({
        loading: false,
        message: error instanceof Error ? error.message : ADD_LICS_CONSTANTS.MESSAGES.STREETS_LOAD_ERROR
      });
    }
  }, [getToken, updateState, updateAddressData, log]);

  // ‚úÖ –®–∞–≥ 2.2: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º selectStreet - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const selectStreet = useCallback(async (street: Street): Promise<void> => {
    try {
      log(`Selecting street: ${street.name} (${street.ids})`);
      updateState({ 
        loading: true,
        message: ADD_LICS_CONSTANTS.MESSAGES.LOADING_HOUSES,
        selectedStreet: street,
        selectedHouse: undefined
      });

      updateAddressData('streetId', street.ids);
      updateAddressData('streetName', street.name);

      // ‚úÖ –®–∞–≥ 3.1: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π API –≤—ã–∑–æ–≤ –∫–∞–∫ –≤ AddLic2
      const response: ApiResponse = await getData(ADD_LICS_API_ENDPOINTS.GET_HOUSES, {
        token: getToken(),
        ids: street.ids  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–∞–∫ –≤ AddLic2
      });

      if (response.error) {
        throw new Error(response.message || ADD_LICS_CONSTANTS.MESSAGES.HOUSES_LOAD_ERROR);
      }

      const houses: House[] = response.data || [];
      log(`Loaded ${houses.length} houses for street ${street.name}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º street —Å –¥–æ–º–∞–º–∏
      const updatedStreet = { ...street, houses };

      updateState({
        selectedStreet: updatedStreet,
        loading: false,
        message: ''
      });

    } catch (error) {
      console.error(`${DEBUG_PREFIXES.ADD_LICS} Error loading houses:`, error);
      updateState({
        loading: false,
        message: error instanceof Error ? error.message : ADD_LICS_CONSTANTS.MESSAGES.HOUSES_LOAD_ERROR
      });
    }
  }, [getToken, updateState, updateAddressData, log]);

  const selectHouse = useCallback((house: House): void => {
    log(`Selecting house: ${house.number} (${house.id})`);
    updateState({ selectedHouse: house });
    updateAddressData('houseId', house.id);
    updateAddressData('houseNumber', house.number);
  }, [updateState, updateAddressData, log]);

  // ========================
  // –í–ê–õ–ò–î–ê–¶–ò–Ø - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø
  // ========================

  const validateCodeForm = useCallback((): boolean => {
    const { lc, fio } = state.codeData;
    const { VALIDATION } = ADD_LICS_CONSTANTS;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –õ–°
    if (!lc || lc.trim().length === 0) {
      return false;
    }
    if (lc.length < VALIDATION.MIN_LC_LENGTH || lc.length > VALIDATION.MAX_LC_LENGTH) {
      return false;
    }
    if (!VALIDATION.LC_PATTERN.test(lc)) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û
    if (!fio || fio.trim().length === 0) {
      return false;
    }
    if (fio.length < VALIDATION.MIN_FIO_LENGTH || fio.length > VALIDATION.MAX_FIO_LENGTH) {
      return false;
    }
    if (!VALIDATION.FIO_PATTERN.test(fio)) {
      return false;
    }

    return true;
  }, [state.codeData]);

  // ‚úÖ –®–∞–≥ 5.2: –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ulusId
  const validateAddressForm = useCallback((): boolean => {
    const { ulusId, settlementId, streetId, houseId, apartment, lc, fio } = state.addressData;
    const { VALIDATION } = ADD_LICS_CONSTANTS;

    // üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—Å–∞ (–ø–æ–∫–∞ –¥–µ–ª–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å API –¥–ª—è —É–ª—É—Å–æ–≤)
    // if (!ulusId) return false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
    if (!settlementId || !streetId || !houseId) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (apartment && apartment.length > 0) {
      if (apartment.length > VALIDATION.MAX_APARTMENT_LENGTH) {
        return false;
      }
      if (!VALIDATION.APARTMENT_PATTERN.test(apartment)) {
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –õ–°
    if (!lc || lc.trim().length === 0) {
      return false;
    }
    if (lc.length < VALIDATION.MIN_LC_LENGTH || lc.length > VALIDATION.MAX_LC_LENGTH) {
      return false;
    }
    if (!VALIDATION.LC_PATTERN.test(lc)) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û
    if (!fio || fio.trim().length === 0) {
      return false;
    }
    if (fio.length < VALIDATION.MIN_FIO_LENGTH || fio.length > VALIDATION.MAX_FIO_LENGTH) {
      return false;
    }
    if (!VALIDATION.FIO_PATTERN.test(fio)) {
      return false;
    }

    return true;
  }, [state.addressData]);

  // ========================
  // –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
  // ========================

  const submitByCode = useCallback(async (): Promise<boolean> => {
    try {
      if (!validateCodeForm()) {
        updateState({ message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã' });
        return false;
      }

      log('Submitting by code...', state.codeData);
      updateState({ 
        loading: true, 
        message: ADD_LICS_CONSTANTS.MESSAGES.ADDING_ACCOUNT 
      });

      const params: AddAccountParams = {
        token: getToken(),
        LC: state.codeData.lc,
        fio: state.codeData.fio
      };

      const response: ApiResponse = await getData(ADD_LICS_API_ENDPOINTS.ADD_ACCOUNT, params);

      if (response.error) {
        throw new Error(response.message || ADD_LICS_CONSTANTS.MESSAGES.ADD_ACCOUNT_ERROR);
      }

      log('Account added successfully by code');

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ lics –∏ profile
      await Promise.all([
        getLics({ token: getToken() }),
        getProfile({ token: getToken() })
      ]);

      updateState({
        loading: false,
        message: ADD_LICS_CONSTANTS.MESSAGES.ACCOUNT_ADDED
      });

      return true;

    } catch (error) {
      console.error(`${DEBUG_PREFIXES.ADD_LICS} Error submitting by code:`, error);
      updateState({
        loading: false,
        message: error instanceof Error ? error.message : ADD_LICS_CONSTANTS.MESSAGES.ADD_ACCOUNT_ERROR
      });
      return false;
    }
  }, [state.codeData, validateCodeForm, getToken, updateState, log]);

  // ‚úÖ –®–∞–≥ 4.2: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º submitByAddress - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –≤ AddLic2
  const submitByAddress = useCallback(async (): Promise<boolean> => {
    try {
      if (!validateAddressForm()) {
        updateState({ message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã' });
        return false;
      }

      log('Submitting by address...', state.addressData);
      updateState({ 
        loading: true, 
        message: ADD_LICS_CONSTANTS.MESSAGES.ADDING_ACCOUNT 
      });

      // ‚úÖ –®–∞–≥ 4.1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –≤ AddLic2
      const params: AddAccountParams = {
        token: getToken(),
        fio: state.addressData.fio,
        s_id: state.addressData.settlementId,      // ‚úÖ ID –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        ids: state.addressData.streetId,           // ‚úÖ ID —É–ª–∏—Ü—ã
        house_id: state.addressData.houseId,       // ‚úÖ ID –¥–æ–º–∞
        LC: state.addressData.lc                   // ‚úÖ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
      if (state.addressData.apartment && state.addressData.apartment.trim().length > 0) {
        params.apartment = state.addressData.apartment.trim();
      }

      const response: ApiResponse = await getData(ADD_LICS_API_ENDPOINTS.ADD_ACCOUNT, params);

      if (response.error) {
        throw new Error(response.message || ADD_LICS_CONSTANTS.MESSAGES.ADD_ACCOUNT_ERROR);
      }

      log('Account added successfully by address');

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ lics –∏ profile
      await Promise.all([
        getLics({ token: getToken() }),
        getProfile({ token: getToken() })
      ]);

      updateState({
        loading: false,
        message: ADD_LICS_CONSTANTS.MESSAGES.ACCOUNT_ADDED
      });

      return true;

    } catch (error) {
      console.error(`${DEBUG_PREFIXES.ADD_LICS} Error submitting by address:`, error);
      updateState({
        loading: false,
        message: error instanceof Error ? error.message : ADD_LICS_CONSTANTS.MESSAGES.ADD_ACCOUNT_ERROR
      });
      return false;
    }
  }, [state.addressData, validateAddressForm, getToken, updateState, log]);

  // ========================
  // –£–¢–ò–õ–ò–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï
  // ========================

  const resetForms = useCallback(() => {
    log('Resetting all forms');
    updateState({
      codeData: { ...ADD_LICS_CONSTANTS.INITIAL_CODE_DATA },
      addressData: { ...ADD_LICS_CONSTANTS.INITIAL_ADDRESS_DATA },
      selectedUlus: undefined,           // üÜï
      selectedSettlement: undefined,
      selectedStreet: undefined,
      selectedHouse: undefined,
      message: ''
    });
  }, [updateState, log]);

  const clearMessage = useCallback(() => {
    updateState({ message: '' });
  }, [updateState]);

  const setMessage = useCallback((message: string) => {
    updateState({ message });
  }, [updateState]);

  // ========================
  // –í–û–ó–í–†–ê–¢ –ò–ù–¢–ï–†–§–ï–ô–°–ê –•–£–ö–ê - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô
  // ========================

  return {
    // State
    state,
    
    // Mode management
    setMode,
    resetToSelection,
    
    // Form data management
    updateCodeData,
    updateAddressData,
    
    // üÜï Address form specific - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–ª—É—Å–æ–≤
    loadUluses,           // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
    selectUlus,           // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
    loadSettlements,      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ulusId
    selectSettlement,
    selectStreet,
    selectHouse,
    
    // Form submission
    submitByCode,
    submitByAddress,
    
    // Utilities
    validateCodeForm,
    validateAddressForm,
    resetForms,
    clearMessage,
    setMessage
  };
};